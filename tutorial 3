
DigitalIn enterButton(BUTTON1);
DigitalIn gasDetector(D2);
DigitalIn overTempDetector(D3);
DigitalIn aButton(D4);
DigitalIn bButton(D5);
DigitalIn cButton(D6);
DigitalIn dButton(D7);

DigitalOut alarmLed(LED1);
DigitalOut incorrectCodeLed(LED3);
DigitalOut systemBlockedLed(LED2);

UnbufferedSerial uartUsb(USBTX, USBRX, 115200);

//=====[Declaration and initialization of public global variables]=============
bool gasstate = OFF;
bool tempstate = OFF;
bool alarmState = OFF;
int numberOfIncorrectCodes = 0;

//=====[Declarations (prototypes) of public functions]=========================

void inputsInit();
void outputsInit();

void alarmActivationUpdate();
void alarmDeactivationUpdate();

void uartTask();
void availableCommands();
void mtask();
void warning();

//=====[Main function, the program entry point after power on or reset]========

int main()
{
    inputsInit();
    outputsInit();
    while (true) {
void alarmActivationUpdate();
void alarmDeactivationUpdate();
      //uartTask();
      //mtask();
      warning();
    }
}

//=====[Implementations of public functions]===================================

void inputsInit()
{
    gasDetector.mode(PullDown);
    overTempDetector.mode(PullDown);
    aButton.mode(PullDown);
    bButton.mode(PullDown);
    cButton.mode(PullDown);
    dButton.mode(PullDown);
}

void outputsInit()
{
    alarmLed = OFF;
    incorrectCodeLed = OFF;
    systemBlockedLed = OFF;
}

void alarmActivationUpdate()
{
    if ( gasDetector || overTempDetector ) {
        alarmState = ON;
    }
    alarmLed = alarmState;
}

void alarmDeactivationUpdate()
{
    if ( numberOfIncorrectCodes < 5 ) {
        if ( aButton && bButton && cButton && dButton && !enterButton ) {
            incorrectCodeLed = OFF;
        }
        if ( enterButton && !incorrectCodeLed && alarmState ) {
            if ( aButton && bButton && !cButton && !dButton ) {
                alarmState = OFF;
                numberOfIncorrectCodes = 0;
            } else {
                incorrectCodeLed = ON;
                numberOfIncorrectCodes = numberOfIncorrectCodes + 1;
            }
        }
    } else {
        systemBlockedLed = ON;
    }
}

void uartTask()
{  
    char receivedChar = '\0';
    if( uartUsb.readable() ) {
        uartUsb.read( &receivedChar, 1 );
        switch(receivedChar){
            case '1':
                if ( alarmState ) {
                    uartUsb.write( "The alarm is activated\r\n", 24);
                } else {
                    uartUsb.write( "The alarm is not activated\r\n", 28);
                }
                break;   
            case '2':
                if (gasDetector){
                    uartUsb.write( "Gas is detected\r\n", 17);   
                }
                else {
                uartUsb.write( "Gas is not detected\r\n", 21);
                }
                break; 
            case '3':
                if (overTempDetector){ 
                uartUsb.write( "Temperature level is high\r\n", 27);     
                }
                else {
                uartUsb.write( "Temperature level is normal\r\n", 29);
                }
                break; 
            default:
                availableCommands();
                break;
        }
    }
}
void availableCommands(){   
    uartUsb.write( "\nPress '1' to get the alarm state\r\n\r\n", 36 );
    uartUsb.write( "Press '2' to get the state of gas\r\n\r\n", 37 );
    uartUsb.write( "Press '3' to get the Temperature level\r\n\r\n", 41 );   
}

void mtask()
{
if (alarmState){
    uartUsb.write( "The alarm is activated\r\n", 24);
                } else {
                    uartUsb.write( "The alarm is not activated\r\n", 28);
                }
 ThisThread::sleep_for(BLINKING_RATE2);
if (gasDetector == ON){
    uartUsb.write( "Gas is detected\r\n", 17);   
                } else {
                uartUsb.write( "Gas is not detected\r\n", 21);
                }
 ThisThread::sleep_for(BLINKING_RATE2);
if (overTempDetector == ON){
    uartUsb.write( "Temperature level is high\r\n", 27);     
                } else {
                uartUsb.write("Temperature level is normal\r\n", 29);
                }
 ThisThread::sleep_for(BLINKING_RATE2);

}

void warning(){
   
if (gasDetector){
   uartUsb.write("WARNING! Safe gas limit has been exceeded\r\n", 42);
ThisThread::sleep_for(1s);
}

if (overTempDetector) {
uartUsb.write("WARNING! Safe temperature level has been exceeded\r\n", 50);
ThisThread::sleep_for(1s);
}
}
